* [[https://kirang.in/post/different-applications-of-reduce-in-clojure/][Deep Dive into Reduce]]
  This is an interesting article about reduce, I will do my best to derive the contents of which without looking at the authors solution as a way to warm back up to functional thinking:
** Reverse a Collection
   My first thought is to take the last and use `conj` to add to a list
#+begin_src clojure
;; given a collection '(1 2 3), use reduce to reverse
(reduce (fn [acc n] (conj acc n)) '() [1 2 3])
#+end_src
This is the exact answer as the blog post and takes into consideration that because of the sequence abstraction conj will do the performant thing, which is drilled into any early clojure programmer -- conj adds to end of vector, but to beginning of a singly-linked list.
** Find the frequency of words in a string
   split by spaces, (not necessarily the most robust) and then use reduce to build up a collection of word and count vectors EDIT: first thought is to use vectors because I'm new here, the probably right way to go about this is with a hashmap where the key is the word and the value is the count.
#+begin_src clojure
(def input-string "Hey there! I am the hey man! I like to hey the people")

(defn word-freq [s]
  (let [in (map
             (fn [i] (clojure.string/replace i #"[^\w\s]" "")) (map clojure.string/lower-case (clojure.string/split input-string #" ")))]
    (do (println in)
        (reduce (fn [acc n]
                  (if (contains? acc n)
                    (update acc n inc)
                    (assoc acc n 1))) {} in))))

(word-freq input-string)
;; => {"like" 1, "people" 1, "man" 1, "am" 1, "hey" 3, "i" 2, "to" 1, "the" 2, "there" 1}
#+end_src
In this case the answer on the blog post is a bit simpler, but then again the author does not clean the input as much as I do (blah! and blah are not considered different words etc), let's explore the authors solution:
#+begin_src clojure
;; I find inline function here a bit confusing so lets expand
(defn w-freq [s]
  (reduce (fn [acc n]
            (assoc acc n (inc (acc n 0))))
          {}
          (clojure.string/split s #"\s")))
(w-freq input-string)
;; => {"like" 1, "people" 1, "man!" 1, "am" 1, "Hey" 1, "hey" 2, "there!" 1, "I" 2, "to" 1, "the" 2}

;; something I haven't used is the default value that can be placed
;; in a map lookup when using the "map as a function" for finding a key
(def m {"somekey" 1 "otherkey" 2})

;; if it exists then all is well
(m "somekey")
;; => 1

;; if it does not exist and a default is available the default is presented
(m "missingkey" 22)
;; => 22
#+end_src
this answer is shorter than my own but what is more interesting is that it really starts the demonstrate the built-in powers of the clojure map, which is demonstrated after the expanded example. With just a simple map we can avoid a branching if-statement and instead use a plain old `assoc` for every key whether or not it is contained in the map previously -- this has more of a "do what I mean" kind of a feel to it, that is, there are fewer guard-expressions checking the state of the collection against the current input.
** Transform all values of a map
   So here we have an example of the idea of reduce being a more general function than a map function, and in fact [[https://clojuredesign.club/episode/058-reducing-it-down/][reduce and reducing functions]] are behind the idea of how immutable functional collections track state
#+begin_src clojure
(def v  {:v 1 :o 2 :t 3})

(defn my-map [f coll]
  reduce (fn [acc v]
           (assoc acc (f v))) {} coll)

(my-map inc v)
;; => {:v 1, :o 2, :t 3}
#+end_src
There are only slight differences between my version and the authors version there's always something to learn from picking apart a different solution:
#+begin_src clojure
;; I will say that the title heading is transform, which implies
;; a general function will be applied to a value of a map, in the
;; op's version `inc` is hard-coded as the transform, I'll keep my
;; more general interpretation
(defn op-map [f coll]
  (reduce (fn [acc [k v]] ; so basically the difference is the very clear destructuring, which of course is super awesome!
            (assoc acc k (f v)))
          {}
          coll))

(op-map inc {:o 1 :v 2 :t 3})
;; => {:o 2, :v 3, :t 4}

#+end_src
** Use Reduce to filter values out of a map
   Use reduces accumulation to gather values that match a certain condition. So pass in a predicate and `conj` into a new map:
#+begin_src clojure
(defn my-filter [pred coll]
  (reduce (fn [acc [key val]]
            (if (pred val)
              (conj acc [key val])
              acc))
          {}
          coll))

(my-filter even? {:v 1 :o 2 :g 3 :t 12})
;; => {:o 2, :t 12}
#+end_src
My variation is slightly different the choice between `assoc` and `conj` being the only real difference which makes my solution ever so slightly less specific to hashmaps and of course conceptually accepting a predicate is again more general than hard coding the predicate into the function. The gist is the same.
** Implement a mapping function
I could argue that I already made a mapping function above but lets try to make one that works with basic clojure collections instead of just specific to maps:
#+begin_src clojure
(defn gen-map [f coll]
  (reduce (fn [acc v]
            (conj acc (f v)))
          []
          coll))

(gen-map inc '(1 2 3))
;; => [2 3 4]
#+end_src
** Sort list based on sum of elements
   Hmmm, this seems to just be about using reduce in a regular way, as in, reduce as a tool not demonstrating how reduce is similar to some function or how reduce can be used to recreate some of the core functions etc:
#+begin_src clojure
(sort-by #(reduce + %) ['(8 8 7) '(4 1 5) '(1 1 1)])
;; => ((1 1 1) (4 1 5) (8 8 7))
#+end_src
** Generate the Fibonacci Series
   This is fun just because the fib series has a recursive vibe to it, as a reminder the fib series is found by adding the last two together, so there is a fundamental accumulation happening so: 0 1 1 2 3 5 8 13 21, normally the first two 1's are given and the 0 is not included:
#+begin_src clojure
(defn fib [n]
  (take n (lazy-seq (reduce (fn [acc v]
                              (if (< n 2)
                                (reduced (take n acc))
                                (conj acc (apply + (take-last 2 acc)))))
                            [0 1]
                            (range n)))))

(fib 8)
;; => (0 1 1 2 3 5 8 13)
(fib 1)
;; => (0)
(fib 0)
;; => ()
(fib 2)
;; => (0 1)
#+end_src
Fib never gets old, my solution is not the same as the authors so lets pick it apart:
#+begin_src clojure
;; slight modification to make fib generate more than a single case (range param n)
(defn op-fib [n]
  (reduce (fn [acc _]
            (conj acc (+ (last acc) (last (butlast acc)))))
          [0 1]
          (range n)))

(fib 8)
;; => (0 1 1 2 3 5 8 13)
(fib 0);; => ()
(fib 1);; => (0)
#+end_src
 I have to admit this is a clearer solution than my own, straight forward add the last to the second last to the total collection and continue...done.
** Finding Factorial
   Ok, factorial is 5! = 5 * 4 * 3 * 2 * 1, like a reduce multiplication if you want to force reduce?
#+begin_src clojure
(defn my-fact [n]
  (reduce (fn [acc v]
            (* acc v))
          (range 1 (inc n))))

(my-fact 5)
;; => 120
#+end_src
haha, the authors solution is even simpler, so good! `*` receives more than a single operand so I can just use `*`
#+begin_src clojure
(defn op-fact [n]
  (reduce * (range 1 (inc n))))

(op-fact 5)
;; => 120
#+end_src
** Implementing Comp
   This sounds interesting, `comp` takes an input and passes it through a chain of functions like a g(f(x)), so pass in x to function f, output of function f to function g and on, so I imagine reduce will be working on a collection of functions and the initial value will be the input passed through?
#+begin_src clojure
(defn my-comp [x fn-coll]
  (reduce (fn [acc f]
            (f acc))
          x
          (reverse fn-coll)))

(my-comp 5 [inc (fn [z] (* z z))])
;; => 26
((comp inc (fn [z] (* z z))) 5)
;; => 26
#+end_src
It seems like there's a difference between implementations, let's explore:
#+begin_src clojure
;; so I have to admit my implementation does not actually do what `comp`
;; does, in that it does not return the function of a collection of functions
;; instead my version returns the result of an input passed through multiple
;; functions

;; so the author's solution in that respect is more correct because a function is
;; returned but let's see if I can unpack even more

(defn op-comp [& fs]
  (fn [xs]
    (first
      (reduce
        #(vector (apply %2 %1))
        (list xs)
        (reverse fs)))))

((op-comp inc dec inc inc) 5)

;; so flip the function order (I have that)
;; then the inputs of which there can be many, a sequence of one or more
;; apply barfs them out of their sequence and applies arg-1 to fn-1...arg-n to fn-n
;; and returns a vector of those, and then from that we return only the first?
;; i think I will have to analyze this in chunks

;; ok after a little playing around I have it, apply the fn to input x
;; I have rewritten the inner function to explictly accept a single input
;; since [& xs] gives the impression that the second inner function takes
;; multiple arguments (it does not, it simply needs to wrap the input in a
;; collection in order for `apply` to work it's magic on it)
;; so only one input just like `comp` and multiple functions, the %1 is always the
;; accumulated value which will always be the output of the previous function
;; and in so we use apply to barf out the previous fns output into the next fns
;; input, finally first unwraps the result from the underlying collection...
;; I think my solution is simpler lol
#+end_src

* [[https://twitter.com/Al_Grigor/status/1357028887209902088][Alexey Grigorev Twitter Interview Question]]
Most candidates cannot solve this interview problem:

ðŸ”¸ Input: "aaaabbbcca"
ðŸ”¸ Output: [("a", 4), ("b", 3), ("c", 2), ("a", 1)]

Write a function that converts the input to the output

I ask it in the screening interview and give it 25 minutes

How would you solve it?

---

Thought this was interesting given that this kind of problem is almost trivial in clojure:
#+begin_src clojure
;; this is a classic partition-by identity, not to be confused with a
;; straight up `frequencies` core function solution
;; then maybe a `juxt` if you're trying to show off
(partition-by identity "aaaabbbcca")
;; => ((\a \a \a \a) (\b \b \b) (\c \c) (\a))
(let [[f s] ((juxt #(map (fn [i] (.toString (first i))) %) #(map count %)) (partition-by identity "aaaabbbcca"))]
  (vec (partition 2 (interleave f s))))
;; => [("a" 4) ("b" 3) ("c" 2) ("a" 1)]

;; so this is kinda sad, don't think I'd hire me for this one haha, I did ;; this a few weeks? (time!) ago and came up with this:

((fn [s]
   (mapv
     (fn [c]
       (list (first c) (count c)))
     (partition-by identity s)))
 "aaaabbbcca")
;; => [(\a 4) (\b 3) (\c 2) (\a 1)]

;; and I believe the remaining are examples that I appreciated but did not come up with myself

;; this is likely my favorite since it is so clear, my attempt to use
;; `juxt` (one of my first) made my solution clumsy buuuuut it is
;; interesting that like a mathematical equation, this solution seems to
;; factor a `map` outside of the `juxt` in my solution, almost like a
;; distributive law in math
((fn [s]
   (map (juxt first count)
        (partition-by identity s)))
 "aaaabbbcca")
;; => ([\a 4] [\b 3] [\c 2] [\a 1])

;; I have to say list comprehension is still something I'm getting used to
(for [run (partition-by identity "aaaabbbcca")]
  [(first run) (count run)])
;; => ([\a 4] [\b 3] [\c 2] [\a 1])
#+end_src
